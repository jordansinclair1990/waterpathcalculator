{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","state","focalLength","targetDepth","materialVRatio","materialDiameter","showResults","changeTargetDepth","bind","changeFocalLength","changeDiameter","changeMaterial","event","this","setState","parseFloat","target","value","window","location","reload","fl","d","k","Dia","denominator","waterpathclean","toFixed","className","href","onClick","refreshPage","type","placeholder","onChange","name","id","React","Component","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"uOAgKeA,G,wDA5Jb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAEDC,MAAQ,CACXC,YAAa,EACbC,YAAa,EACbC,eAAgB,EAChBC,iBAAkB,EAClBC,YAAa,QAGf,EAAKC,kBAAoB,EAAKA,kBAAkBC,KAAvB,gBAEzB,EAAKC,kBAAoB,EAAKA,kBAAkBD,KAAvB,gBAEzB,EAAKE,eAAiB,EAAKA,eAAeF,KAApB,gBAEtB,EAAKG,eAAiB,EAAKA,eAAeH,KAApB,gBAEtB,EAAKF,YAAc,EAAKA,YAAYE,KAAjB,gBAnBF,E,8DAsBDI,GAChBC,KAAKC,SAAS,CACZZ,YAAaa,WAAWH,EAAMI,OAAOC,W,wCAIvBL,GAChBC,KAAKC,SAAS,CACZX,YAAaY,WAAWH,EAAMI,OAAOC,W,qCAI1BL,GACbC,KAAKC,SAAS,CACZT,iBAAkBU,WAAWH,EAAMI,OAAOC,W,qCAI/BL,GACa,wBAAtBA,EAAMI,OAAOC,OACfJ,KAAKC,SAAS,CACZV,eAAgB,IAGM,YAAtBQ,EAAMI,OAAOC,OACfJ,KAAKC,SAAS,CACZV,eAAgB,QAGM,UAAtBQ,EAAMI,OAAOC,OACfJ,KAAKC,SAAS,CACZV,eAAgB,QAGM,SAAtBQ,EAAMI,OAAOC,OACfJ,KAAKC,SAAS,CACZV,eAAgB,U,oCAMpBS,KAAKC,SAAS,CACZR,YAAa,W,oCAKfY,OAAOC,SAASC,QAAO,K,+BAMvB,IAAIC,EAAKR,KAAKZ,MAAMC,YAChBoB,EAAIT,KAAKZ,MAAME,YACfoB,EAAIV,KAAKZ,MAAMG,eACfoB,EAAMX,KAAKZ,MAAMI,iBAGjBoB,EAAgB,EAAIH,GAAMC,EAAI,GAM9BG,GAFYL,EALAC,EAAIC,EAAIC,GAGxBC,GADeD,IAKgBG,QAAQ,GACvC,OACE,yBAAKC,UAAU,OACb,yBAAKA,UAAU,UACb,yBAAKA,UAAU,gBACb,yBAAKA,UAAU,kBACb,uDAEF,wBAAIA,UAAU,cACZ,uBAAGC,KAAK,KACN,wBAAIC,QAASjB,KAAKkB,aAAlB,aAMR,yBAAKH,UAAU,WACb,yBAAKA,UAAU,gBACb,yBAAKA,UAAU,gBACb,2BACEI,KAAK,OACLJ,UAAU,QACVK,YAAY,0BACZC,SAAUrB,KAAKJ,oBAEjB,2BACEuB,KAAK,OACLJ,UAAU,QACVK,YAAY,eACZC,SAAUrB,KAAKN,oBAGjB,4BACE4B,KAAK,gBACLC,GAAG,gBACHF,SAAUrB,KAAKF,gBAEf,4BAAQM,MAAM,wBAAd,wBAGA,4BAAQA,MAAM,YAAd,YACA,4BAAQA,MAAM,UAAd,UACA,4BAAQA,MAAM,SAAd,UAEF,2BACEe,KAAK,OACLJ,UAAU,QACVK,YAAY,oBACZC,SAAUrB,KAAKH,kBAGnB,yBAAKkB,UAAU,OACb,uBAAGA,UAAWf,KAAKZ,MAAMK,aAAzB,kCACkC,IAC/BoB,EAAgB,IAFnB,WAKA,yBAAKE,UAAU,MAAME,QAASjB,KAAKP,aAAnC,qB,GAlJI+B,IAAMC,YCSJC,QACW,cAA7BrB,OAAOC,SAASqB,UAEe,UAA7BtB,OAAOC,SAASqB,UAEhBtB,OAAOC,SAASqB,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.f74efd13.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      focalLength: 0,\n      targetDepth: 0,\n      materialVRatio: 0,\n      materialDiameter: 0,\n      showResults: 'hide',\n    };\n\n    this.changeTargetDepth = this.changeTargetDepth.bind(this);\n\n    this.changeFocalLength = this.changeFocalLength.bind(this);\n\n    this.changeDiameter = this.changeDiameter.bind(this);\n\n    this.changeMaterial = this.changeMaterial.bind(this);\n\n    this.showResults = this.showResults.bind(this);\n  }\n\n  changeFocalLength(event) {\n    this.setState({\n      focalLength: parseFloat(event.target.value),\n    });\n  }\n\n  changeTargetDepth(event) {\n    this.setState({\n      targetDepth: parseFloat(event.target.value),\n    });\n  }\n\n  changeDiameter(event) {\n    this.setState({\n      materialDiameter: parseFloat(event.target.value),\n    });\n  }\n\n  changeMaterial(event) {\n    if (event.target.value == 'Select Material Type') {\n      this.setState({\n        materialVRatio: 0,\n      });\n    }\n    if (event.target.value == 'Titanium') {\n      this.setState({\n        materialVRatio: 3.984,\n      });\n    }\n    if (event.target.value == 'Nickel') {\n      this.setState({\n        materialVRatio: 3.782,\n      });\n    }\n    if (event.target.value == 'Steel') {\n      this.setState({\n        materialVRatio: 3.984,\n      });\n    }\n  }\n\n  showResults() {\n    this.setState({\n      showResults: 'show',\n    });\n  }\n\n  refreshPage() {\n    window.location.reload(false)\n  }\n\n\n\n  render() {\n    let fl = this.state.focalLength\n    let d = this.state.targetDepth\n    let k = this.state.materialVRatio\n    let Dia = this.state.materialDiameter\n\n    let numerator = d * k * Dia;\n    let denominator = ((2 * d) * (k - 1));\n    let diameter = Dia;\n    denominator = denominator + diameter;\n\n    let waterpath = fl - (numerator / denominator)\n\n    let waterpathclean = waterpath.toFixed(3)\n    return (\n      <div className='App'>\n        <div className='header'>\n          <div className='inner-header'>\n            <div className='logo-container'>\n              <h1>Focal Depth Calculator</h1>\n            </div>\n            <ul className='navigation'>\n              <a href='#'>\n                <li onClick={this.refreshPage}>Reset</li>\n              </a>\n            </ul>\n          </div>\n        </div>\n\n        <div className='wrapper'>\n          <div className='contact-form'>\n            <div className='input-fields'>\n              <input\n                type='text'\n                className='input'\n                placeholder='Transducer Focal Length'\n                onChange={this.changeFocalLength}\n              />\n              <input\n                type='text'\n                className='input'\n                placeholder='Target Depth'\n                onChange={this.changeTargetDepth}\n              />\n\n              <select\n                name='material-type'\n                id='material-type'\n                onChange={this.changeMaterial}\n              >\n                <option value='Select Material Type'>\n                  Select Material Type\n                </option>\n                <option value='Titanium'>Titanium</option>\n                <option value='Nickel'>Nickel</option>\n                <option value='Steel'>Steel</option>\n              </select>\n              <input\n                type='text'\n                className='input'\n                placeholder='Material Diameter'\n                onChange={this.changeDiameter}\n              />\n            </div>\n            <div className='msg'>\n              <p className={this.state.showResults}>\n                The water path should be set to{' '}\n                {waterpathclean}{' '}\n                inches.\n              </p>\n              <div className='btn' onClick={this.showResults}>\n                Calculate\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}